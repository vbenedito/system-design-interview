// Conexão com o banco de dados
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Modelos de autenticação NextAuth (seu schema inicial)
model User {
  id             String                                       @id @default(cuid())
  name           String?
  email          String                                       @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  Authenticators Authenticator[]

  // Novos campos:
  isPremium                    Boolean                                               @default(false)
  mockInterviews               MockInterview[]
  workInIndustry               String                                                @default("no")
  yearsExperience              String                                                @default("0-2")
  seniorityLevel               SeniorityLevel                                        @default(JUNIOR)
  howMuchTimeStudySystemDesign Int                                                   @default(0)
  unity                        String                                                @default("days")
  alreadyVisitedOnboardingPage Boolean                                               @default(false)


  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Challenge {
  id          String   @id @default(cuid())
  title       String
  description String
  slug         String @default("https://example.com")
  difficulty  DifficultyLevel @default(MEDIUM)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  mockInterviews MockInterview[]
}

model MockInterview {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  challengeId String
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)

  company     String
  result      InterviewResult
  startedAt   DateTime
  finishedAt  DateTime?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum SeniorityLevel {
  JUNIOR
  MIDLEVEL
  SENIOR
  STAFF
}

enum InterviewResult {
  APPROVED
  REJECTED
  IN_PROGRESS
}

enum DifficultyLevel {
  EASY
  MEDIUM
  HARD
}
